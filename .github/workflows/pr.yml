# ------------- [General Knowledge] -------------
# (1) `source branch` is current pr branch
# (2) `$GITHUB_SHA` means the merge commit on `source branch` instead of latest commit
# Ref: https://github.community/t/github-sha-not-the-same-as-the-triggering-commit/18286/2

name: pr

on:
  pull_request:
    branches:
      - master

jobs:
  upload-first-data:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Display pr info
        # pull_request properties:
        # Doc: https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull_request

        # Access "context" variable with `${{ <expression> }}` syntax (on runner or workflow file scope)
        #   Ref: https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#about-contexts-and-expressions
        # Access "env" variable with `$ENV_NAME` syntax (exists only on runner)
        #   Ref: https://docs.github.com/en/actions/reference/environment-variables#about-environment-variables
        run: |
          # Access pr branch:
          # Ref: https://github.community/t/how-to-get-pr-branch-name-in-github-actions/16598/2
          # Ref: https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#github-context
          echo "PR branch - ${{ github.head_ref }}"
          echo "PR branch - ${{ github.event.pull_request.head.ref }}"
          # Access pr number (see properties link above):
          echo "PR number - ${{ github.event.number }}"
          echo "PR number (nested) - ${{ github.event.pull_request.number }}"
          # Access pr commits:
          # Ref: https://github.community/t/github-sha-not-the-same-as-the-triggering-commit/18286/2
          # Ref: https://github.community/t/github-sha-but-how-to-get-the-latest-commit-reference-on-a-branch/17160/2
          echo "PR commit - ${{ github.event.pull_request.head.sha }}"
          echo "Merge commit - ${{ github.sha }}"
          # Note 1: accessing `${GITHUB_SHA}` is equivalent to `$GITHUB_SHA`
          # Note 2: expression `${ GITHUB_SHA }` is illegal
          # Note 3: access `$GITHUB_SHA` in runner scope === access `process.env.GITHUB_SHA` in the github-script
          echo "Merge commit - $GITHUB_SHA"
          echo "Repo - $GITHUB_REPOSITORY"
      - name: Generate data
        uses: actions/github-script@v4
        with:
          script: |
            const path = require('path');
            const scriptPath = path.resolve('./.github/workflows/generate-data.js');
            const filename = "generated-first-data.txt";
            await require(scriptPath)(github, context, core, filename);

            console.log("PR commit - ", '${{ github.event.pull_request.head.sha }}');
            console.log("Merge commit - ", '${{ github.sha }}');
            // console.log("Merge commit - ", $GITHUB_SHA); // $GITHUB_SHA is not defined
            console.log("Merge commit - ", process.env.GITHUB_SHA);
            console.log("Repo - ", process.env.GITHUB_REPOSITORY);
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: first-data-arctifact
          path: generated-first-data.txt
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: .
  upload-second-data:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Generate data
        uses: actions/github-script@v4
        with:
          script: |
            const path = require('path');
            const scriptPath = path.resolve('./.github/workflows/generate-data.js');
            const filename = "generated-second-data.txt";
            await require(scriptPath)(github, context, core, filename);
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: second-data-arctifact
          path: generated-second-data.txt
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: .
  pr-comment:
    runs-on: ubuntu-18.04
    if: ${{ github.actor != 'dependabot[bot]' }}
    needs: [upload-first-data, upload-second-data]
    steps:
      - uses: actions/checkout@v2
      - name: Download artifact
        uses: actions/download-artifact@v2
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: .
      - name: "Writing comments"
        uses: actions/github-script@v4
        with:
          script: |
            const path = require('path');
            const scriptPath = path.resolve('./.github/workflows/dependabot-comments/index.js');
            const commitHash = '${{ github.event.pull_request.head.sha }}';
            await require(scriptPath)(github, context, core, commitHash, "pr");
  # Ref: https://github.community/t/run-github-actions-job-only-if-previous-job-has-failed/174786/2
  error-job:
    runs-on: ubuntu-latest
    steps:
      - name: Throw error
        uses: actions/github-script@v4
        with:
          script: |
            try {
              throw new Error("Mock error");
            } catch (error) {
              core.setFailed(error.message);
            }
  # Expect job "error-backup-job" will runs
  error-backup-job:
    runs-on: ubuntu-latest
    needs: [error-job]
    if: always() && needs.error-job.result == 'failure'
    steps:
      - name: Run if dependent job failed
        run: |
          echo "Backup job running"
  success-job:
    runs-on: ubuntu-latest
    steps:
      - name: Succeed
        run: |
          exit 0
  # Expect job "success-backup-job" will NOT runs
  success-backup-job:
    runs-on: ubuntu-latest
    needs: [success-job]
    if: always() && needs.success-job.result == 'failure'
    steps:
      - name: Run if dependent job failed
        run: |
          echo "Backup job running"
